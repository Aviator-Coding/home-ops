---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Pre-pull Images

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  HOMEBREW_NO_ANALYTICS: "1"

jobs:
  filter-changes:
    name: Filter changes
    runs-on: ubuntu-latest
    # runs-on: aviator-coding-home-ops-runner
    outputs:
      changed-files: ${{ steps.changed-files.outputs.changed_files }}
    steps:
      - name: Get changed files
        id: changed-files
        uses: bjw-s-labs/action-changed-files@b1144fc772fca235a50902c7bb6cc431cc7d8e27 # v0.3.2
        with:
          patterns: |-
            kubernetes/**/*

  extract-images:
    if: ${{ needs.filter-changes.outputs.changed-files != '[]' }}
    name: Extract Images
    runs-on: ubuntu-latest
    # runs-on: aviator-coding-home-ops-runner
    needs:
      - filter-changes
    strategy:
      matrix:
        branches:
          - default
          - pull
      fail-fast: false
    outputs:
      default: ${{ steps.extract-images.outputs.default }}
      pull: ${{ steps.extract-images.outputs.pull }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: "${{ matrix.branches == 'default' && github.event.repository.default_branch || '' }}"

      - name: Gather Images
        uses: docker://ghcr.io/allenporter/flux-local:v7.5.0
        with:
          args: >-
            get cluster
            --all-namespaces
            --path /github/workspace/kubernetes/flux/cluster
            --enable-images
            --only-images
            --output json
            --output-file images.json

      - name: Extract Images
        id: extract-images
        run: |
          echo "${{ matrix.branches }}=$(jq --compact-output '.' images.json)" >> "${GITHUB_OUTPUT}"

  compare-images:
    if: ${{ needs.extract-images.outputs.default != needs.extract-images.outputs.pull }}
    name: Compare Images
    runs-on: ubuntu-latest
    # runs-on: aviator-coding-home-ops-runner
    needs:
      - extract-images
    outputs:
      images: ${{ steps.compare-images.outputs.images }}
    steps:
      - name: Compare Images
        id: compare-images
        run: |
          images=$(jq --compact-output --null-input \
              --argjson f1 '${{ needs.extract-images.outputs.default }}' \
              --argjson f2 '${{ needs.extract-images.outputs.pull }}' \
              '$f2 - $f1' \
          )
          echo "images=${images}" >> "${GITHUB_OUTPUT}"

          {
              echo "## New images to Pull"
              echo '```json'
              echo "${images}" | jq
              echo '```'
          } >> "${GITHUB_STEP_SUMMARY}"

  pre-pull-images:
    if: ${{ needs.compare-images.outputs.images != '[]' }}
    name: Pre-pull Images
    # runs-on: ubuntu-latest
    runs-on: gha-runner-scale-set-aviator-coding-home-ops
    needs:
      - compare-images
    strategy:
      matrix:
        image: ${{ fromJSON(needs.compare-images.outputs.images) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Validate Environment
        run: |
          echo "üîç Validating environment..."
          echo "NODE_IP: ${NODE_IP:-'NOT_SET'}"
          echo "Current image: ${{ matrix.image }}"

          if [[ -z "$NODE_IP" ]]; then
            echo "‚ùå NODE_IP environment variable is not set"
            exit 1
          fi

          echo "‚úÖ Environment validation passed"

      - name: Attest Image
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          echo "üîê Verifying image attestation for: ${{ matrix.image }}"

          case "${{ matrix.image }}" in
            *home-operations*)
              echo "Verifying home-operations image..."
              if gh attestation verify --owner home-operations oci://${{ matrix.image }}; then
                echo "‚úÖ Attestation verified for home-operations image"
              else
                echo "‚ö†Ô∏è Attestation verification failed for home-operations image"
                exit 1
              fi
              ;;
            *bjw-s-labs*)
              echo "Verifying bjw-s-labs image..."
              if gh attestation verify --owner bjw-s-labs oci://${{ matrix.image }}; then
                echo "‚úÖ Attestation verified for bjw-s-labs image"
              else
                echo "‚ö†Ô∏è Attestation verification failed for bjw-s-labs image"
                exit 1
              fi
              ;;
            *)
              echo "‚ö†Ô∏è No attestation verification configured for: ${{ matrix.image }}"
              echo "Proceeding without attestation verification..."
              ;;
          esac

      - name: Install and Configure talosctl
        run: |
          echo "üîß Installing talosctl..."
          curl -fsSL https://talos.dev/install | sh

          echo "üìç Checking talosctl installation..."
          talosctl version --client || {
            echo "‚ùå talosctl installation failed"
            exit 1
          }

          echo "üîë Configuring talosctl..."
          if [[ -f /var/run/secrets/talos.dev/config ]]; then
            export TALOSCONFIG=/var/run/secrets/talos.dev/config
            echo "‚úÖ Using mounted talos config"
          else
            echo "‚ö†Ô∏è No talos config found, using default"
          fi

          echo "üè• Testing node connectivity..."
          if talosctl -n "$NODE_IP" version ; then
            echo "‚úÖ Node connectivity confirmed"
          else
            echo "‚ùå Cannot connect to node $NODE_IP"
            exit 1
          fi

      - name: Pre-pull Image on Talos Node
        run: |
          echo "üöÄ Pre-pulling image on Talos node: ${{ matrix.image }}"

          # Extract image name for better logging
          image_name=$(echo "${{ matrix.image }}" | cut -d':' -f1-2)

          # Check if image already exists (flexible matching)
          echo "üîç Checking if image already exists..."
          if talosctl -n "$NODE_IP" image list | grep -q "$image_name"; then
            echo "‚ÑπÔ∏è Found existing versions of $image_name on node:"
            talosctl -n "$NODE_IP" image list | grep "$image_name" || true
          else
            echo "üì• No existing versions of $image_name found"
          fi

          echo "üì• Pulling image: ${{ matrix.image }}"

          # Pull the image with more verbose output
          if talosctl -n "$NODE_IP" image pull "${{ matrix.image }}"; then
            echo "‚úÖ Successfully pre-pulled ${{ matrix.image }}"

            # Immediately check what was actually stored
            echo "üîç Image now stored as:"
            talosctl -n "$NODE_IP" image list | grep "$image_name" | head -5 || echo "No matching images found after pull"

            # Small delay to ensure image list is updated
            echo "‚è≥ Waiting 2 seconds for image list to update..."
            sleep 2
          else
            echo "‚ùå Failed to pre-pull ${{ matrix.image }}"
            echo "üìä Current images on node:"
            talosctl -n "$NODE_IP" image list | head -10
            exit 1
          fi

      - name: Verify Image on Node
        run: |
          echo "üîç Verifying image exists on node..."

          # Extract image name without tag/digest for more flexible matching
          image_name=$(echo "${{ matrix.image }}" | cut -d':' -f1-2)
          image_tag=$(echo "${{ matrix.image }}" | cut -d':' -f3 | cut -d'@' -f1)

          echo "üîç Looking for image: $image_name"
          echo "üîç With tag: $image_tag"

          # Try multiple matching strategies
          if talosctl -n "$NODE_IP" image list | grep -q "$image_name:$image_tag" || \
             talosctl -n "$NODE_IP" image list | grep -q "$image_name@" || \
             talosctl -n "$NODE_IP" image list | grep -q "${{ matrix.image }}"; then
            echo "‚úÖ Image ${{ matrix.image }} confirmed on node $NODE_IP"

            # Get image details - show all matches for this image
            echo "üìä Image details:"
            echo "All variants of this image on node:"
            talosctl -n "$NODE_IP" image list | grep "$image_name" || true
          else
            echo "‚ùå Image ${{ matrix.image }} not found on node after pull"
            echo "üîç Searched for patterns:"
            echo "  - $image_name:$image_tag"
            echo "  - $image_name@"
            echo "  - ${{ matrix.image }}"
            echo ""
            echo "Available images (first 15):"
            talosctl -n "$NODE_IP" image list | head -15
            echo ""
            echo "üîç All images containing '$image_name':"
            talosctl -n "$NODE_IP" image list | grep "$image_name" || echo "No matches found"
            exit 1
          fi

      - name: Test Image Pull via Docker
        continue-on-error: true
        run: |
          echo "üê≥ Testing image pull via Docker (for verification)..."

          # Test basic image accessibility
          image_name_tag=$(echo "${{ matrix.image }}" | cut -d'@' -f1)
          echo "üîç Testing basic image access: $image_name_tag"

          if docker pull "$image_name_tag"; then
            echo "‚úÖ Docker pull successful for $image_name_tag"
            docker image inspect "$image_name_tag" --format='{{.RepoTags}} {{.RepoDigests}} {{.Size}} bytes' || true
          else
            echo "‚ö†Ô∏è Docker pull failed for $image_name_tag"
          fi

          echo ""
          echo "üîç Testing exact image with digest: ${{ matrix.image }}"
          if docker pull "${{ matrix.image }}"; then
            echo "‚úÖ Docker pull successful for ${{ matrix.image }}"
            docker image inspect "${{ matrix.image }}" --format='{{.RepoTags}} {{.RepoDigests}} {{.Size}} bytes' || true
          else
            echo "‚ö†Ô∏è Docker pull failed for ${{ matrix.image }}"
            echo "This may indicate the specific digest is not available for this platform"
          fi

  pre-pull-images-success:
    if: ${{ !cancelled() }}
    needs:
      - pre-pull-images
    name: Pre-pull Images Successful
    runs-on: ubuntu-latest
    # runs-on: aviator-coding-home-ops-runner
    steps:
      - name: Check job status
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1
